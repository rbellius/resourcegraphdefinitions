apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: cert-manager-bundle
spec:
  schema:
    apiVersion: v1alpha1
    kind: CertManangerBundle
    spec:

        production: boolean | false

        ingress:
          class: string | default="traefik" enum="traefik"

        dns:
          providers: 
            cloudflare:
              enabled: boolean | default=false
              email: string
              domain: string 
            duckdns:
              enabled: boolean | default=true
              domain: string
              dynamic: boolean | default=true   
  


  
        # ingress:
        #   class: string | default="traefik" enum="traefik"
        #   tls:
        #     enabled: boolean | default=false
        #     dns:
        #       domain: string
        #       email: string
        #       provider: string | default="duckdns" enum="duckdns,cloudflare"
        #       dynamic: boolean | default=false

        # # ingress:
        # #   enabled: boolean | default=true
        # #   domain: string | default="example.com"
        # #   subdomain: string | default="app"
        # #   tls: boolean | default=false

        # ingress:
        #   class: string |  default="traefik"

        # dns:
        #   enabled: boolean | default=false
        #   token: string
        #   duckdns: boolean | default=false
        #   cloudflare: boolean | default=false
        #   dynamic: boolean | default=false

    # status:
    #   # Fields the controller will inject into instances status.
    #   certManagerConditions: ${certmanager.status.conditions}

#  validation:
#     # Validating admission policies added to the new API type's CRD
#     - expression: "${ self.image == 'nginx' || !self.ingress.enabled }"
#       message: "Only nginx based applications can have ingress enabled"

  # Define the resources this API will manage.
  resources:
      # - id: argocdIngress
      #   template:
      #     apiVersion: kro.run/v1alpha1
      #     kind: Ingress
      #     metadata:
      #       name: argocd
      #       namespace: argocd
      #     spec:

      #       env: staging

      #       subdomain: argocd
      #       domain: ${schema.spec.domain}


      - id: certmanager
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager
              namespace: argocd
              annotations:
                argocd.argoproj.io/instance: cert-manager-duckdns-ddns-application
                # argocd.argoproj.io/sync-wave: "-10"              
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io

            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://charts.jetstack.io
                chart: cert-manager  
                targetRevision: 1.17.2
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false
                      
                    enableCertificateOwnerRef: true
                    extraArgs:
                      - --dns01-recursive-nameservers-only
                      - --dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53
        

  
      - id: certManagerDuckDnsWebhook
        includeWhen:
          - ${schema.spec.dns.providers.duckdns.enabled} # Only include if the user wants to use DuckDNS
        readyWhen:
          - ${certmanager.status.conditions} # Ensure cert-manager is ready before deploying the webhook
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager-duckdns-webhook
              namespace: argocd
              annotations:
                argocd.argoproj.io/sync-wave: "0"

              finalizers:
                - resources-finalizer.argocd.argoproj.io

            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://csp33.github.io/cert-manager-duckdns-webhook
                chart: cert-manager-duckdns-webhook  
                targetRevision: 1.1.3
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false

                    groupName: acme.rbellius.com

                    fullnameOverride: "cert-manager-duckdns-webook"

                    clusterIssuer:
                      email: eddie.moya@gmail.com

                      ## A defect in this chart prevents the staging issuer from being created if production is enabled.
                      production:
                        create: true
                        server: https://acme-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-prod
                      staging:
                        create: true
                        server: https://acme-staging-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-staging
            
                    token:
                      existingSecret: true
                      existingSecretName: duckdns-api-key-secret

      - id: duckdnsddns 
        includeWhen:
          - ${schema.spec.dns.providers.duckdns.dynamic} # Only include if the user wants to use dynamic DNS
        template:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: duckdns-ddns
            namespace: argocd
            annotations:
              argocd.argoproj.io/instance: cert-manager-duckdns-ddns-application
              # argocd.argoproj.io/sync-wave: "-10"
              # argocd.argoproj.io/hook: "PreSync"
              
            finalizers:
              - resources-finalizer.argocd.argoproj.io

          spec:
            project: default

            syncPolicy:
              automated:
                selfHeal: true
                prune: true
                allowEmpty: true
            
              syncOptions:
                - CreateNamespace=true
                # - ApplyOutOfSyncOnly=true

            destination:
              server: https://kubernetes.default.svc
              namespace: cert-manager

            source:
              repoURL: git@github.com:rbellius/charts.git
              path: duckdns-ddns
              targetRevision: main
              helm:
                valuesObject:
                  domain: ${schema.spec.dns.providers.duckdns.domain}
                  schedule: "0-59/5 * * * *"
                  secret:

                    name: duckdns-api-key-secret
                    key: token

                  getIpCommand: kubectl -n kube-system get svc traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'


    
