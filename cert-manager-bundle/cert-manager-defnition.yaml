apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: cert-manager-bundle
spec:
  schema:
    apiVersion: v1alpha1
    kind: CertManangerBundle
    spec:

        production: boolean | false

        ingress:
          class: string | default="traefik" enum="traefik"

        dns:
          providers: 
            cloudflare:
              enabled: boolean | default=false
              email: string
              domain: string 
            duckdns:
              enabled: boolean | default=true
              domain: string
              dynamic: boolean | default=true   
  


  
        # ingress:
        #   class: string | default="traefik" enum="traefik"
        #   tls:
        #     enabled: boolean | default=false
        #     dns:
        #       domain: string
        #       email: string
        #       provider: string | default="duckdns" enum="duckdns,cloudflare"
        #       dynamic: boolean | default=false

        # # ingress:
        # #   enabled: boolean | default=true
        # #   domain: string | default="example.com"
        # #   subdomain: string | default="app"
        # #   tls: boolean | default=false

        # ingress:
        #   class: string |  default="traefik"

        # dns:
        #   enabled: boolean | default=false
        #   token: string
        #   duckdns: boolean | default=false
        #   cloudflare: boolean | default=false
        #   dynamic: boolean | default=false

    # status:
    #   # Fields the controller will inject into instances status.
    #   certManagerConditions: ${certmanager.status.conditions}

#  validation:
#     # Validating admission policies added to the new API type's CRD
#     - expression: "${ self.image == 'nginx' || !self.ingress.enabled }"
#       message: "Only nginx based applications can have ingress enabled"

  # Define the resources this API will manage.
  resources:
      # - id: argocdIngress
      #   template:
      #     apiVersion: kro.run/v1alpha1
      #     kind: Ingress
      #     metadata:
      #       name: argocd
      #       namespace: argocd
      #     spec:

      #       env: staging

      #       subdomain: argocd
      #       domain: ${schema.spec.domain}


      # - id: certmanager
      #   includeWhen:
      #     - ${schema.spec.dns.enabled} # Only include if the user wants to use DuckDNS or Cloudflare
      #   template:
      #       apiVersion: argoproj.io/v1alpha1
      #       kind: Application
      #       metadata:
      #         name: cert-manager
      #         namespace: argocd
      #         annotations:
      #           argocd.argoproj.io/sync-wave: "-10"              
      
      #         finalizers:
      #           - resources-finalizer.argocd.argoproj.io

      #       spec:
      #         project: default

      #         syncPolicy:
      #           automated:
      #             selfHeal: true
      #             prune: true
      #             allowEmpty: true
              
      #           syncOptions:
      #             - CreateNamespace=true
      #             # - ApplyOutOfSyncOnly=true

      #         destination:
      #           server: https://kubernetes.default.svc
      #           namespace: cert-manager

      #         source:
      #           repoURL: https://charts.jetstack.io
      #           chart: cert-manager  
      #           targetRevision: 1.17.1
      #           helm:
      #             valuesObject:
      #               crds:
      #                 enabled: true
      #                 keep: false
      #               # extraArgs:
      #               #   - --dns01-recursive-nameservers-only
      #               #   - --dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53
        

  
      # - id: certManagerWebhookDuckdnsHelmChart
      #   includeWhen:
      #     - ${schema.spec.dns.duckdns} # Only include if the user wants to use DuckDNS
      #   # readyWhen:
      #   #   - ${certManagerHelmChart.status.conditions} # Ensure cert-manager is ready before deploying the webhook
      #   template:
      #       apiVersion: argoproj.io/v1alpha1
      #       kind: Application
      #       metadata:
      #         name: cert-manager-duckdns-webhook
      #         namespace: argocd
      #         annotations:
      #           argocd.argoproj.io/sync-wave: "0"

      #         finalizers:
      #           - resources-finalizer.argocd.argoproj.io

      #       spec:
      #         project: default

      #         syncPolicy:
      #           automated:
      #             selfHeal: true
      #             prune: true
      #             allowEmpty: true
              
      #           syncOptions:
      #             - CreateNamespace=true
      #             # - ApplyOutOfSyncOnly=true

      #         destination:
      #           server: https://kubernetes.default.svc
      #           namespace: cert-manager

      #         source:
      #           repoURL: https://csp33.github.io/cert-manager-duckdns-webhook
      #           chart: cert-manager-duckdns-webhook  
      #           targetRevision: 1.1.3
      #           helm:
      #             valuesObject:
      #               crds:
      #                 enabled: true
      #                 keep: false

      #               token:
      #                 existingSecretName: duckdns-api-key-secret
                
      #               clusterIssuer:
      #                 email: ${schema.spec.email}
      #                 staging:
      #                   create: true
      #                   name: duckdns-letsencrypt-staging
      #                 production:
      #                   create: ${schema.spec.production}
      #                   name: duckdns-letsencrypt-prod 
            

      - id: duckdnsddns 
        includeWhen:
          - ${schema.spec.dns.providers.duckdns.dynamic} # Only include if the user wants to use dynamic DNS
        template:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: duckdns-ddns
            namespace: argocd
            annotations:
              argocd.argoproj.io/sync-wave: "-10"
              argocd.argoproj.io/hook: "PreSync"
              
            finalizers:
              - resources-finalizer.argocd.argoproj.io

          spec:
            project: default

            syncPolicy:
              automated:
                selfHeal: true
                prune: true
                allowEmpty: true
            
              syncOptions:
                - CreateNamespace=true
                # - ApplyOutOfSyncOnly=true

            destination:
              server: https://kubernetes.default.svc
              namespace: cert-manager

            source:
              repoURL: git@github.com:rbellius/charts.git
              path: duckdns-ddns
              targetRevision: main
              helm:
                valuesObject:
                  domain: ${schema.spec.dns.providers.duckdns.domain}
                  schedule: "0-59/5 * * * *"
                  secret:

                    name: duckdns-api-key-secret
                    key: token

                  getIpCommand: kubectl -n kube-system get svc traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'


    
