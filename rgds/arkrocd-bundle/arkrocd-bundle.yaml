apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: arkrocd-bundle
  labels:
    app.kubernetes.io/name: arkrocd-bundle-rgd
    app.kubernetes.io/instance: arkrocd-bundle
    app.kubernetes.io/component: rgd
    app.kubernetes.io/part-of: mikrolab
spec:
  schema:
    apiVersion: v1alpha1
    kind: ArkroCDBundle
    spec:

      env: string | default="staging" enum="staging,production"

  resources:
      - id: argocdManagedKro
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: kro
              namespace: argocd
              annotations:
                argocd.argoproj.io/instance: argocd
                # argocd.argoproj.io/sync-wave: "-10"
                argocd.argoproj.io/hook: PreSync              
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io
              labels:
                  app.kubernetes.io/name:       kro-application
                  app.kubernetes.io/instance:   arkrocd-bundle
                  app.kubernetes.io/component:  kro
                  app.kubernetes.io/part-of:    mikrolab
            spec:

              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true

                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: kro
              
              source:
                repoURL: git@github.com:rbellius/kro.git
                targetRevision: main
                path: helm
                helm:
                  valuesObject:
                    crds:
                      install: true
                      keep: false
    



      - id: argocdManagedArgocd
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: argocd
              namespace: argocd
              annotations:
                argocd.argoproj.io/instance: argocd
                # argocd.argoproj.io/sync-wave: "-10"  
                argocd.argoproj.io/hook: PreSync            
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io
              labels:
                  app.kubernetes.io/name:       argocd-application
                  app.kubernetes.io/instance:   arkrocd-bundle
                  app.kubernetes.io/component:  argocd
                  app.kubernetes.io/part-of:    mikrolab


            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  # allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: argocd

              source:
                repoURL: https://argoproj.github.io/argo-helm
                chart: argo-cd
                targetRevision: 8.0.0
                helm:
                  valuesObject:
                      # global:
                      #   domain: ${schema.spec.domain}

                      crds:
                        create: true
                        keep: false

                      dex:
                        enabled: false


                      configs:
                        params:
                          server.insecure: true

                      # server:
                      #   ingress:
                      #     tls: true
                      #     enabled: true
                      #     annotations:
                      #       cert-manager.io/cluster-issuer: ${schema.spec.provider}-letsencrypt-${schema.spec.env}
                        cm:
                          timeout.reconciliation: 15s
                          # application.instanceLabelKey: argocd.argoproj.io/instance
                          application.resourceTrackingMethod: "annotation+label"
                          applicationsetcontroller.enable.new.git.file.globbing: "true"

                          resource.customizations.health:

                            argoproj.io_Application: |
                                hs = {}
                                hs.status = "Progressing"
                                hs.message = ""
                                if obj.status ~= nil then
                                  if obj.status.health ~= nil then
                                    hs.status = obj.status.health.status
                                    if obj.status.health.message ~= nil then
                                      hs.message = obj.status.health.message
                                    end
                                  end
                                end
                                return hs
                            argoproj.io_ApplicationSet: |
                              local hs = {}

                              if obj.status ~= nil then
                                if obj.status.conditions ~= nil then
                                  for i, condition in pairs(obj.status.conditions) do
                                    if condition.type == "ErrorOccurred" and condition.status == "True" then
                                      hs.status = "Degraded"
                                      hs.message = condition.message
                                      return hs
                                    end
                                  end
                                  for i, condition in pairs(obj.status.conditions) do
                                    if condition.type == "ResourcesUpToDate" and condition.status == "False" then
                                      hs.status = "Degraded"
                                      hs.message = condition.message
                                      return hs
                                    end
                                  end
                                  for i, condition in pairs(obj.status.conditions) do
                                    if condition.type == "RolloutProgressing" and condition.status == "True" then
                                      hs.status = "Progressing"
                                      hs.message = condition.message
                                      return hs
                                    end
                                  end
                                  for i, condition in pairs(obj.status.conditions) do
                                    if condition.type == "ResourcesUpToDate" and condition.status == "True" then
                                      hs.status = "Healthy"
                                      hs.message = condition.message
                                      return hs
                                    end
                                  end
                                end
                              end

                              hs.status = "Progressing"
                              hs.message = "Waiting for the status to be reported"
                              return hs
                            apiextentions.k8s.io_CustomResourceDefinition: |
                              local hs = {}

                              -- Check if CRD is terminating
                              if obj.metadata.deletionTimestamp ~= nil then
                                  hs.status = "Progressing"
                                  hs.message = "CRD is terminating"
                                  return hs
                              end

                              if obj.status.conditions == nil then
                                  hs.status = "Progressing"
                                  hs.message = "Status conditions not found"
                                  return hs
                              end

                              if #obj.status.conditions == 0 then
                                  hs.status = "Progressing"
                                  hs.message = "Status conditions not found"
                                  return hs
                              end

                              local isEstablished
                              local conditionMsg = ""

                              for _, condition in pairs(obj.status.conditions) do

                                  -- Check if CRD is terminating
                                  if condition.type == "Terminating" and condition.status == "True" then
                                      hs.status = "Progressing"
                                      hs.message = "CRD is terminating: " .. condition.message
                                      return hs
                                  end

                                  -- Check if K8s has accepted names for this CRD
                                  if condition.type == "NamesAccepted" and condition.status == "False" then
                                      hs.status = "Degraded"
                                      hs.message = "CRD names have not been accepted: " .. condition.message
                                      return hs
                                  end

                                  -- Checking if CRD has violations
                                  if condition.type == "NonStructuralSchema" and condition.status == "True" then
                                      hs.status = "Degraded"
                                      hs.message = "Schema violations found: " .. condition.message
                                      return hs
                                  end

                                  -- Checking if CRD is established
                                  if condition.type == "Established" and condition.status == "True" then
                                      isEstablished = true
                                      conditionMsg = condition.message
                                  end
                              end

                              if not isEstablished then
                                  hs.status = "Degraded"
                                  hs.message = "CRD is not established"
                                  return hs
                              end

                              hs.status = "Healthy"
                              hs.message = "CRD is healthy"
                              return hs
                            cert-manager.io_Certificate: |
                              hs = {}
                              if obj.status ~= nil then
                                if obj.status.conditions ~= nil then
                                  for i, condition in ipairs(obj.status.conditions) do
                                    if condition.type == "Ready" and condition.status == "False" then
                                      hs.status = "Degraded"
                                      hs.message = condition.message
                                      return hs
                                    end
                                    if condition.type == "Ready" and condition.status == "True" then
                                      hs.status = "Healthy"
                                      hs.message = condition.message
                                      return hs
                                    end
                                  end
                                end
                              end

                              hs.status = "Progressing"
                              hs.message = "Waiting for certificate"
                              return hs


      # - id: argocdIngressRequest
      #   template:
      #       apiVersion: kro.run/v1alpha1
      #       kind: IngressRequest
      #       metadata:
      #         name: argocd
      #         namespace: argocd
      #         annotations:
      #           argocd.argoproj.io/instance: argocd-ingress          

      #       spec:

      #         env: ${schema.spec.env}
      #         subdomain: argocdtest
      #         service:
      #           name: argocd-server
---

    # - id: arkrocdBundle
    #   # dependsOn: 
    #   #     - certMangerBundle
    #   template:
apiVersion: kro.run/v1alpha1
kind: ArkroCDBundle
metadata:
  name: staging-arkrocd-bundle
  namespace: argocd
  annotations:
    argocd.argoproj.io/instance: arkrocd-bundle