apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: cert-manager-bundle
  labels:
    app.kubernetes.io/name: cert-manager-bundle-rgd
    app.kubernetes.io/instance: cert-manager-bundle
    app.kubernetes.io/component: rgd
    app.kubernetes.io/part-of: mikrolab
  annotations:
    argocd.argoproj.io/instance: cert-manager-bundle

  finalizers:
    - resources-finalizer.argocd.argoproj.io/foreground
spec:
  schema:
    apiVersion: v1alpha1
    kind: CertManagerBundle


    spec:

        env: string | default="staging" enum="staging,production"

        ingress:
          class: string | default="traefik" enum="traefik"
          requests: boolean | default=true

        tls:
          enabled: boolean | default=false
          provider: string | default="duckdns" enum="duckdns,cloudflare"
          dynamic: boolean | default=false # Duckdns only
          email: string | required=true
          domain: string | required=true

    status:
      certmanager:
        resources: ${certmanagerChart.status.operationState.syncResult.resources}
        healthy: ${certmanagerChart.status.health.status}
        synced: ${certmanagerChart.status.sync.status}  
    
  resources:


      - id: certmanagerChart
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager
              namespace: argocd
            annotations:
              argocd.argoproj.io/tracking-id: ${schema.metadata.?annotations["argocd.argoproj.io/tracking-id"]}
              # argocd.argoproj.io/instance: cert-manager-bundle
                # argocd.argoproj.io/hook: PreSync
                # argocd.argoproj.io/sync-wave: "-10"              
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io/foreground

            spec:

              project: default 
              
              syncPolicy:
                automated:
                  selfHeal: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://charts.jetstack.io
                chart: cert-manager  
                targetRevision: 1.17.2
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false
                      
                    enableCertificateOwnerRef: true
                    extraArgs:
                      - --dns01-recursive-nameservers-only
                      - --dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53
        
      - id: ingressConfigGenerator
        includeWhen:
          - ${schema.spec.ingress.requests}
        template:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: ingress-request-configmap
            namespace: cert-manager
            annotations:
              argocd.argoproj.io/tracking-id: ${schema.metadata.?annotations["argocd.argoproj.io/tracking-id"]}
              # argocd.argoproj.io/hook: PreSync
            finalizers:
                - resources-finalizer.argocd.argoproj.io/foreground
              # argocd.argoproj.io/sync-wave: "0"
            labels:
              app.kubernetes.io/instance:   cert-manager-bundle
              app.kubernetes.io/name:       ingress-request-configmap
              app.kubernetes.io/part-of:    mikrolab

          data:
      
            ingressClass:   ${schema.spec.ingress.class}
            domain:         ${schema.spec.tls.domain}
            clusterIssuer:  ${schema.spec.tls.provider}-letsencrypt-${schema.spec.env}
        
      - id: certManagerBuiltInIssuer
        includeWhen:
          - ${schema.spec.tls.enabled} 
          - ${schema.spec.tls.provider == "cloudflare"} 
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: 'cert-manager-${schema.spec.tls.provider}'
              namespace: argocd
            annotations:
              argocd.argoproj.io/tracking-id: ${schema.metadata.?annotations["argocd.argoproj.io/tracking-id"]}
              # argocd.argoproj.io/instance: cert-manager-bundle
                # argocd.argoproj.io/sync-wave: "-10" 
                # argocd.argoproj.io/hook: "PreSync"             
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io
              labels:
                    app.kubernetes.io/name:       'cert-manager-${schema.spec.tls.provider}-application'
                    app.kubernetes.io/instance:   'cert-manager-bundle'
                    app.kubernetes.io/component:  'cert-manager-${schema.spec.tls.provider}-webhook'
                    app.kubernetes.io/part-of:    'mikrolab'
            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://codeberg.org/eddiemoya/charts.git
                path: 'cert-manager-${schema.spec.tls.provider}'
                targetRevision: main
                helm:
                  valuesObject:
                    provider:   ${schema.spec.tls.provider}
                    email:      ${schema.spec.tls.email}
                    domain:     ${schema.spec.tls.domain}




      - id: certManagerDuckDnsWebhook
        includeWhen:
          - ${schema.spec.tls.enabled}
          - ${schema.spec.tls.provider == "duckdns"} 
        # readyWhen:
        #   - ${certManagerDuckDnsWebhook.status.state == "Ready"} # Ensure cert-manager is ready before deploying the webhook
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager-duckdns-webhook
              namespace: argocd
            annotations:
              argocd.argoproj.io/tracking-id: ${schema.metadata.?annotations["argocd.argoproj.io/tracking-id"]}
                # argocd.argoproj.io/sync-wave: "0"
              # argocd.argoproj.io/instance: cert-manager-bundle

              finalizers:
                - resources-finalizer.argocd.argoproj.io/foreground
              labels:
                  app.kubernetes.io/name:       cert-manager-duckdns-webhook-application
                  app.kubernetes.io/instance:   cert-manager-bundle
                  app.kubernetes.io/component:  cert-manager-duckdns-webhook
                  app.kubernetes.io/part-of:    mikrolab
            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://csp33.github.io/cert-manager-duckdns-webhook
                chart: cert-manager-duckdns-webhook  
                targetRevision: 1.1.3
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false

                    groupName: 'acme.${schema.spec.tls.domain}-acme'

                    fullnameOverride: "cert-manager-duckdns-webook"

                    clusterIssuer:
                      email: ${schema.spec.tls.email}

                      ## A defect in this chart prevents the staging issuer from being created if production is enabled.
                      production:
                        create: true
                        server: https://acme-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-prod
                      staging:
                        create: true
                        server: https://acme-staging-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-staging
            
                    token:
                      existingSecret: true
                      existingSecretName: duckdns-api-key-secret

      - id: duckdnsddns 
        includeWhen:
          - ${schema.spec.tls.enabled}
          - ${schema.spec.tls.provider == "duckdns"}  
          - ${schema.spec.tls.dynamic} 
        template:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: duckdns-ddns
            namespace: argocd
            annotations:
              argocd.argoproj.io/tracking-id: ${schema.metadata.?annotations["argocd.argoproj.io/tracking-id"]}
              # argocd.argoproj.io/instance: cert-manager-bundle
              argocd.argoproj.io/hook: "PreSync"
              
            finalizers:
              - resources-finalizer.argocd.argoproj.io/foreground
            labels:
                app.kubernetes.io/name:       duckdns-ddns-application
                app.kubernetes.io/instance:   cert-manager-bundle
                app.kubernetes.io/component:  duckdns-ddns
                app.kubernetes.io/part-of:    mikrolab
          spec:
            project: default

            syncPolicy:
              automated:
                selfHeal: true
                prune: true
                allowEmpty: true
            
              syncOptions:
                - CreateNamespace=true
                # - ApplyOutOfSyncOnly=true

            destination:
              server: https://kubernetes.default.svc
              namespace: cert-manager

            source:
              repoURL: https://codeberg.org/eddiemoya/charts.git
              path: duckdns-ddns
              targetRevision: main
              helm:
                valuesObject:
                  domain: ${schema.spec.tls.domain}
                  schedule: "0-59/5 * * * *"
                  secret:

                    name: duckdns-api-key-secret
                    key: token

                  getIpCommand: kubectl -n kube-system get svc traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'


