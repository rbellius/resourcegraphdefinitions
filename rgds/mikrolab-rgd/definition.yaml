apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: mikrolab
  annotations:
    argocd.argoproj.io/instance: mikrolab
  labels:
    app.kubernetes.io/name: mikrolab
    app.kubernetes.io/instance: mikrolab
    app.kubernetes.io/component: infrastructure
    app.kubernetes.io/part-of: mikrolab
    # app.kubernetes.io/managed-by: argocd ## will this be tracked my argocd?

spec:
  schema:
    apiVersion: v1alpha1
    kind: MikroLab
    spec:
   
      env: string | default="staging" enum="staging,production"

      ingress:
        class: string | default="traefik" enum="traefik"
 
      certmanager:
        enabled: boolean | default=true
        provider: string | default="duckdns" enum="duckdns,cloudflare"
        domain: string  
        email: string


    # status:
    #   healthy: ${argocdApplication.status.health.status}
    #   synced: ${argocdApplication.status.sync.status}  

  resources:

    - id: certManagerRGD
      template:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: cert-manager-rgd-application
          namespace: argocd
          annotations:
            # argocd.argoproj.io/sync-wave: ""
            argocd.argoproj.io/hook: PreSync

            
          finalizers:
            # The default behaviour is foreground cascading deletion
            # - resources-finalizer.argocd.argoproj.io
            # Alternatively, you can use background cascading deletion
            - resources-finalizer.argocd.argoproj.io/background

        spec:
          project: default

          syncPolicy:
            automated:
              selfHeal: true
              prune: true
              # allowEmpty: true
          
            syncOptions:
              - CreateNamespace=true
              - Replace=true

          destination:
            server: https://kubernetes.default.svc
            namespace: cert-manager

          source:
            repoURL: git@github.com:rbellius/resourcegraphdefinitions.git
            path: rgds/cert-manager-bundle-rgd
            targetRevision: main

  # - id: ingressRequestArgofile
  #   template:
  #     apiVersion: kro.run/v1alpha1
  #     kind: Argofile
  #     metadata:
  #       name: ingress-request-argofile

  #     spec:
  #       appType: Application
  #       application: 

  #         name: ingress-requres-rgd-loader
  #         enabled: true 
  #         hook: PreSync
  #         destination:
  #           namespace: cert-manager
  #         source:
  #           repoURL: git@github.com:rbellius/resourcegraphdefinitions.git
  #           targetRevision: main
  #           path: rgds/ingress-request-rgd
      

 
  # - id: argocdIngressRequest
  #   template:
  #       apiVersion: kro.run/v1alpha1
  #       kind: IngressRequest
  #       metadata:
  #         name: argocd
  #         namespace: argocd
  #         annotations:
  #           argocd.argoproj.io/instance: argocd-ingress          

  #       spec:

  #         env: ${schema.spec.env}
  #         subdomain: argocdtest
  #         service:
  #           name: argocd-server

    
  # - id: certManagerChartArgofile
  #   # includeWhen:
  #   #   - ${schema.spec.certmanager.enabled == "true"}
  #   readyWhen:
  #     - ${certManagerBundleArgofile.healthy == "true"}
  #     - ${certManagerBundleArgofile.synced == "true"}
  #     - ${certManagerBundleArgofile.state == "ACTIVE"}
  #   template:
  #     apiVersion: kro.run/v1alpha1
  #     kind: Argofile
  #     metadata:
  #       name: platform-argofile
  #       namespace: mikrolab
  #     spec:
  #       appType: Application
  #       application:
  #           name: cert-manager-chart-app
  #           enabled: true  
  #           hook: PreSync
  #           destination:
  #             namespace: cert-manager
  #           source:
  #             repoURL: git@github.com:rbellius/resourcegraphdefinitions.git
  #             targetRevision: main
  #             path: rgds/cert-manager-bundle-rgd

    # - id: SomeChartArgofile
    #   template:
    #     apiVersion: kro.run/v1alpha1
    #     kind: Argofile
    #     metadata:
    #       name: chart-name-argofile
    #     spec:
    #       applications:
    #         - name: chart-name
    #           enabled: true  
    #           hook: PreSync
    #           syncWave: 0
    #           destination:
    #             namespace: your-namespace
    #           source:
    #             repoURL: git@github.com:user/repo.git
    #             targetRevision: main
    #             path: path/to/yaml # Use chart: for actual helm charts
    #           values: | 
    #             foo:
    #               bar: true


    # - id: certManagerNamespace
    #   template:
    #     apiVersion: v1
    #     kind: Namespace
    #     metadata:
    #       name: cert-manager
    #       labels:
    #         app.kubernetes.io/name: cert-manager
    #         app.kubernetes.io/instance: cert-manager
    #         app.kubernetes.io/component: cert-manager
    #         app.kubernetes.io/part-of: cert-manager
    #         app.kubernetes.io/managed-by: argocd
            
  # - id: certMangerBundle
  #   # includeWhen:
  #   #   - ${schema.spec.certmanager.enabled}
  #   template:
  #     apiVersion: kro.run/v1alpha1
  #     kind: CertManangerBundle
  #     metadata:
  #       name: cert-manager-bundle
  #       namespace: cert-manager
  #       annotations:
  #         argocd.argoproj.io/instance: cert-manager-bundle
  #       labels:
  #         rbellius.com/healthy: ${certManagerBundleArgofile.healthy.?status}
  #       # app.kubernetes.io/managed-by: argocd ## will this be tracked my argocd?
  #     spec:

  #       env: ${schema.spec.env}

  #       ingress:
  #         class: ${schema.spec.ingress.class}
  #         requests: true

  #       dns:
  #         providers: 
  #           duckdns:
  #             enabled: ${schema.spec.certmanager.provider == "duckdns"}
  #             email: ${schema.spec.certmanager.email}
  #             domain: ${schema.spec.certmanager.domain}
  #             dynamic: true
  #           # cloudflare:
  #           #   enabled: false
  #           #   email: eddie.moya@gmail.com
  #           #   domain: cloudbreaker.me
  #           builtin:
  #             enabled: ${schema.spec.certmanager.provider == "cloudflare"}
  #             provider: cloudflare
  #             email: ${schema.spec.certmanager.email}
  #             domain: ${schema.spec.certmanager.domain}
  #           default:
  #             provider: ${schema.spec.certmanager.provider}
  #             domain: ${schema.spec.certmanager.domain}

  