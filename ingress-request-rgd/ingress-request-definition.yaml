apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: ingress-request-definition
  annotations:
    argocd.argoproj.io/instance: ingress-request-definition
  labels:
    app.kubernetes.io/name: ingress-request
    app.kubernetes.io/instance: ingress-request
    app.kubernetes.io/component: rgd
    app.kubernetes.io/part-of: mikrolab
    app.kubernetes.io/managed-by: argocd ## will this be tracked my argocd?
spec:
  schema:
    apiVersion: v1alpha1
    kind: IngressRequest
    spec:
   
      subdomain: string
      serviceName: string
      servicePort: integer | default=80

      providers:
        builtin: boolean | default=false
        duckdns: boolean | default=true

      env: string | default="staging" enum="staging,production"

      certManagerBundle: string | default="cert-manager-bundle" enum="cert-manager-bundle"


  resources:

    - id: certManagerBundle
      externalRef:
        apiVersion: kro.run/v1alpha1
        kind: CertManangerBundle
        metadata:
          name: cert-manager-bundle
          namespace: cert-manager
          # annotations:
          #   cert-manager.io/cluster-issuer: '${schema.spec.dnsProvider}-letsencrypt-${schema.spec.env}'


    - id: ingressBuiltInProvider
      includeWhen:
        - ${schema.spec.providers.builtin}
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.metadata.name}
          annotations:
            cert-manager.io/cluster-issuer: '${certManagerBundle.spec.dns.providers.builtin.provider}-letsencrypt-${schema.spec.env}'
          # finalizers:
          #   - resources-finalizer.argocd.argoproj.io
            
          labels:
            app.kubernetes.io/instance: ${schema.metadata.name}
            app.kubernetes.io/name: ingress
            app.kubernetes.io/component: ingress
            app.kubernetes.io/part-of: ${schema.metadata.namespace}
            # app.kubernetes.io/managed-by: kro


        spec: 
          ingressClassName: ${certManagerBundle.spec.ingress.class}

      
          tls:
          - secretName: ${schema.metadata.name}-${schema.metadata.namespace}-${schema.spec.env}-tls
            hosts:
              - '${schema.spec.subdomain}.${certManagerBundle.spec.dns.providers.builtin.domain}'

          rules:
          - host: '${schema.spec.subdomain}.${certManagerBundle.spec.dns.providers.builtin.domain}'
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: ${schema.spec.serviceName}
                    port:
                      number: ${schema.spec.servicePort}

      ## Eliminate duplicate if CEL expressions allow the dynamic chaining for property names of providers. Otherwise we would need iterable loops or conditional gates within the spec
    - id: ingressDuckdns
      includeWhen:
        - ${schema.spec.providers.duckdns}

      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.metadata.name}
          annotations:
            cert-manager.io/cluster-issuer: 'duckdns-letsencrypt-${schema.spec.env}'
          finalizers:
              # - resources-finalizer.argocd.argoproj.io

          labels:
            app.kubernetes.io/instance: ${schema.metadata.name}
            app.kubernetes.io/name: ingress
            app.kubernetes.io/component: ingress
            app.kubernetes.io/part-of: ${schema.metadata.namespace}
            # app.kubernetes.io/managed-by: kro


        spec: 
          ingressClassName: ${certManagerBundle.spec.ingress.class}

      
          tls:
          - secretName: ${schema.metadata.name}-${schema.metadata.namespace}-${schema.spec.env}-tls
            hosts:
              - '${schema.spec.subdomain}.${certManagerBundle.spec.dns.providers.duckdns.domain}'

          rules:
          - host: '${schema.spec.subdomain}.${certManagerBundle.spec.dns.providers.duckdns.domain}'
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: ${schema.spec.serviceName}
                    port:
                      number: ${schema.spec.servicePort}