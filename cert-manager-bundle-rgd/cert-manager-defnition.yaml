apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: cert-manager-bundle
  labels:
    app.kubernetes.io/name: cert-manager-bundle-rgd
    app.kubernetes.io/instance: cert-manager-bundle
    app.kubernetes.io/component: rgd
    app.kubernetes.io/part-of: mikrolab
spec:
  schema:
    apiVersion: v1alpha1
    kind: CertManangerBundle
    spec:

        env: string | default="staging" enum="staging,production"

        ingress:
          class: string | default="traefik" enum="traefik"
          requests: boolean | default=true

        dns:
          providers: 
            # cloudflare:
            #   enabled: boolean | default=false
            #   email: string
            #   domain: string 
            duckdns:
              enabled: boolean | default=true
              email: string
              domain: string
              dynamic: boolean | default=true
            builtin:
              enabled: boolean | default=false
              dynamic: boolean | default=false # No dynamic DNS for builtin providers yet
              provider: string | default="cloudflare" enum="cloudflare" # cloudflare is the only builtin provider for now
              email: string 
              domain: string
            default: string | default="duckdns" enum="duckdns,builtin" # Default provider to use if none is specified




        # dns2:
        #   email:        string
        #   domain:       string 
        #   dynamic:      boolean | default=true
        #   providers:
        #     cloudflare: boolean | default=false
        #     duckdns:    boolean | default=true
              


  
        # ingress:
        #   class: string | default="traefik" enum="traefik"
        #   tls:
        #     enabled: boolean | default=false
        #     dns:
        #       domain: string
        #       email: string
        #       provider: string | default="duckdns" enum="duckdns,cloudflare"
        #       dynamic: boolean | default=false

        # # ingress:
        # #   enabled: boolean | default=true
        # #   domain: string | default="example.com"
        # #   subdomain: string | default="app"
        # #   tls: boolean | default=false

        # ingress:
        #   class: string |  default="traefik"

        # dns:
        #   enabled: boolean | default=false
        #   token: string
        #   duckdns: boolean | default=false
        #   cloudflare: boolean | default=false
        #   dynamic: boolean | default=false

    # status:
    #   # Fields the controller will inject into instances status.
    #   certManagerConditions: ${certmanager.status.conditions}

#  validation:
#     # Validating admission policies added to the new API type's CRD
#     - expression: "${ self.image == 'nginx' || !self.ingress.enabled }"
#       message: "Only nginx based applications can have ingress enabled"

  # Define the resources this API will manage.
  resources:
      # - id: argocdIngress
      #   template:
      #     apiVersion: kro.run/v1alpha1
      #     kind: Ingress
      #     metadata:
      #       name: argocd
      #       namespace: argocd
      #     spec:

      #       env: staging

      #       subdomain: argocd
      #       domain: ${schema.spec.domain}


      - id: certManager
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager
              namespace: argocd
              annotations:
                argocd.argoproj.io/instance: cert-manager-bundle
                # argocd.argoproj.io/sync-wave: "-10"              
      
              finalizers:
                - resources-finalizer.argocd.argoproj.io

            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://charts.jetstack.io
                chart: cert-manager  
                targetRevision: 1.17.2
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false
                      
                    enableCertificateOwnerRef: true
                    extraArgs:
                      - --dns01-recursive-nameservers-only
                      - --dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53
        





      # - id: certManagerBuiltInIssuer
      #   readyWhen:
      #     - ${certManager.status.state == "available"} # Ensure cert-manager is ready before deploying the issuer
      #   includeWhen:
      #     - ${schema.spec.dns.providers.builtin.enabled} # Only include if the user wants to use Cloudflare
      #   template:
      #     apiVersion: cert-manager.io/v1
      #     kind: ClusterIssuer

      #     metadata:
      #       name: ${schema.spec.dns.providers.builtin.provider}-letsencrypt-${schema.spec.env}
      #       annotations:
      #         argocd.argoproj.io/sync-wave: "5"
      #         argocd.argoproj.io/instance: cert-manager-${schema.spec.dns.providers.builtin.provider}
      #       labels:
      #         app.kubernetes.io/instance: 'cert-manager'
      #         app.kubernetes.io/component: '${schema.spec.dns.providers.builtin.provider}-issuer-${schema.spec.env}'
      #         app.kubernetes.io/name: cert-manager-${schema.spec.dns.providers.builtin.provider}-issuer-${schema.spec.env}
      #         app.kubernetes.io/part-of: cert-manager
      #     spec:
      #       acme:

      #         # Email address used for ACME registration
      #         email: ${schema.spec.dns.providers.builtin.email}

      #         # Let's Encrypt Staging
      #         server: https://acme-staging-v02.api.letsencrypt.org/directory

      #         # Let's Encrypt Production
      #         # server: https://acme-v02.api.letsencrypt.org/directory


      #         privateKeySecretRef:
      #           name: issuer-account-key

      #         solvers:

      #         # DNS01 challenge
      #         - dns01:

      #             # Cloudflare DNS01 challenge provider
      #             # ${schema.spec.dns.providers.builtin.provider}:
      #             cloudflare:

      #               # Cloudflare acccount email
      #               email: ${schema.spec.dns.providers.builtin.email}

      #               # Cloudflare Orgin CA API Token
      #               apiKeySecretRef:
      #                 name: '${schema.spec.dns.providers.builtin.provider}-api-key-secret'
      #                 key: '${schema.spec.dns.providers.builtin.provider}'
      #           selector:
      #             dnsZones:
      #             - '${schema.spec.dns.providers.builtin.domain}'




      # - id: certManagerBuiltInProvider
      #   includeWhen:
      #     - ${schema.spec.dns.providers.builtin.enabled} # Only cloudflare is supported for now
      #   template:
      #       apiVersion: argoproj.io/v1alpha1
      #       kind: Application
      #       metadata:
      #         name: 'cert-manager-${schema.spec.dns.providers.builtin.provider}'
      #         namespace: argocd
      #         annotations:
      #           argocd.argoproj.io/instance: cert-manager-bundle
      #           # argocd.argoproj.io/sync-wave: "-10" 
      #           # argocd.argoproj.io/hook: "PreSync"             
      
      #         finalizers:
      #           - resources-finalizer.argocd.argoproj.io
      #         labels:
      #               app.kubernetes.io/name:       'cert-manager-${schema.spec.dns.providers.builtin.provider}-application'
      #               app.kubernetes.io/instance:   'cert-manager-bundle'
      #               app.kubernetes.io/component:  'cert-manager-${schema.spec.dns.providers.builtin.provider}-webhook'
      #               app.kubernetes.io/part-of:    'mikrolab'
      #       spec:
      #         project: default

      #         syncPolicy:
      #           automated:
      #             selfHeal: true
      #             prune: true
      #             allowEmpty: true
              
      #           syncOptions:
      #             - CreateNamespace=true
      #             # - ApplyOutOfSyncOnly=true

      #         destination:
      #           server: https://kubernetes.default.svc
      #           namespace: cert-manager

      #         source:
      #           repoURL: git@github.com:rbellius/charts.git
      #           path: 'cert-manager-${schema.spec.dns.providers.builtin.provider}'
      #           targetRevision: main
      #           helm:
      #             valuesObject:
      #               provider: ${schema.spec.dns.providers.builtin.provider}
      #               email: ${schema.spec.dns.providers.builtin.email}
      #               domain: ${schema.spec.dns.providers.builtin.domain}
  
      - id: certManagerDuckDnsWebhook
        readyWhen:
          - ${certManager.status.state == "available"}
        includeWhen:
          - ${schema.spec.dns.providers.duckdns.enabled} # Only include if the user wants to use DuckDNS
        # readyWhen:
        #   - ${certmanager.status.conditions} # Ensure cert-manager is ready before deploying the webhook
        template:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cert-manager-duckdns-webhook
              namespace: argocd
              annotations:
                # argocd.argoproj.io/sync-wave: "0"
                argocd.argoproj.io/instance: cert-manager-bundle

              finalizers:
                - resources-finalizer.argocd.argoproj.io
              labels:
                  app.kubernetes.io/name:       cert-manager-duckdns-webhook-application
                  app.kubernetes.io/instance:   cert-manager-bundle
                  app.kubernetes.io/component:  cert-manager-duckdns-webhook
                  app.kubernetes.io/part-of:    mikrolab
            spec:
              project: default

              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
              
                syncOptions:
                  - CreateNamespace=true
                  # - ApplyOutOfSyncOnly=true

              destination:
                server: https://kubernetes.default.svc
                namespace: cert-manager

              source:
                repoURL: https://csp33.github.io/cert-manager-duckdns-webhook
                chart: cert-manager-duckdns-webhook  
                targetRevision: 1.1.3
                helm:
                  valuesObject:
                    crds:
                      enabled: true
                      keep: false

                    groupName: 'acme.${schema.spec.dns.providers.duckdns.domain}-acme'

                    fullnameOverride: "cert-manager-duckdns-webook"

                    clusterIssuer:
                      email: ${schema.spec.dns.providers.duckdns.email}

                      ## A defect in this chart prevents the staging issuer from being created if production is enabled.
                      production:
                        create: true
                        server: https://acme-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-prod
                      staging:
                        create: true
                        server: https://acme-staging-v02.api.letsencrypt.org/directory
                        name: duckdns-letsencrypt-staging
            
                    token:
                      existingSecret: true
                      existingSecretName: duckdns-api-key-secret

      - id: duckdnsddns 
        includeWhen:
          - ${schema.spec.dns.providers.duckdns.dynamic} # Only include if the user wants to use dynamic DNS
        template:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: duckdns-ddns
            namespace: argocd
            annotations:
              argocd.argoproj.io/instance: cert-manager-bundle
              # argocd.argoproj.io/sync-wave: "-10"
              # argocd.argoproj.io/hook: "PreSync"
              
            finalizers:
              - resources-finalizer.argocd.argoproj.io
            labels:
                app.kubernetes.io/name:       duckdns-ddns-application
                app.kubernetes.io/instance:   cert-manager-bundle
                app.kubernetes.io/component:  duckdns-ddns
                app.kubernetes.io/part-of:    mikrolab
          spec:
            project: default

            syncPolicy:
              automated:
                selfHeal: true
                prune: true
                allowEmpty: true
            
              syncOptions:
                - CreateNamespace=true
                # - ApplyOutOfSyncOnly=true

            destination:
              server: https://kubernetes.default.svc
              namespace: cert-manager

            source:
              repoURL: git@github.com:rbellius/charts.git
              path: duckdns-ddns
              targetRevision: main
              helm:
                valuesObject:
                  domain: ${schema.spec.dns.providers.duckdns.domain}
                  schedule: "0-59/5 * * * *"
                  secret:

                    name: duckdns-api-key-secret
                    key: token

                  getIpCommand: kubectl -n kube-system get svc traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'



## create optional "install" specs that add the applications for certain dependanies. ingress.install: true   | maybe ingressRequest.install:class
    
      # - id: ingressRequest
      #   includeWhen:
      #     - ${schema.spec.ingress.requests}
      #   template:
      #     apiVersion: argoproj.io/v1alpha1
      #     kind: Application
      #     metadata:
      #       name: ingress-request
      #       namespace: argocd
      #       annotations:
      #         argocd.argoproj.io/instance: cert-manager-bundle
              
      #       finalizers:
      #         - resources-finalizer.argocd.argoproj.io

      #     spec:
      #       project: default

      #       syncPolicy:
      #         automated:
      #           selfHeal: true
      #           prune: true
      #           allowEmpty: true
            
      #         syncOptions:
      #           - CreateNamespace=true
      #           # - ApplyOutOfSyncOnly=true

      #       destination:
      #         server: https://kubernetes.default.svc
      #         namespace: cert-manager

      #       source:
      #         repoURL: git@github.com:rbellius/resourcegraphdefinitions.git
      #         path: ingress-request-rgd
      #         targetRevision: main
      #         # helm:
              #   valuesObject:
